必需的任务
1.实施单人游戏（即一个玩家）的游戏。
2.屏幕上至少可容纳24张Set卡。所有卡片在套装中始终朝上。
3.只发12张牌即可开始。它们可以出现在屏幕上的任何位置（即，它们不必在顶部或底部对齐，也可以在其他任何位置对齐；如果需要，它们可以分散排列以开始显示），但不应重叠。
4.您还将需要一个“交易3张额外的卡”按钮（按照设置规则）。
5.允许用户通过触摸卡来选择要尝试匹配为Set的卡。您要如何在UI中显示“选择”。有关某些想法，请参见下面的提示。还支持“取消选择”（但当前仅选择1或2（不是3）卡）。
6.选择3张卡之后，您必须指出这3张卡是匹配还是不匹配（按照“设置规则”）。您可以选择着色，也可以选择进行着色，但是用户应该清楚他们选择的3张卡是否匹配。
7.选择任何卡并且已经选择了3张不匹配的Set卡时，请取消选择这3张不匹配的卡，然后选择所选的卡。
8.根据设置规则，如果选择了任意一张卡且已经选择了3张匹配的设置卡，则用81张设置卡中的新卡替换这3张匹配的设置卡（同样，请参阅设置规则以了解其中的内容）。设置甲板）。如果卡座为空，则无法更换匹配的卡，但应将其隐藏在用户界面中。如果选择的卡是3张匹配卡之一，则不应选择任何卡（因为所选卡已被替换或在UI中不再可见）。
9.当按下“发三张额外的牌”按钮时，a）如果匹配的话，替换选定的牌；或者b）将三张牌添加到游戏中。
10.如果a）设置卡座中没有更多的卡，或b）UI中没有足够的空间容纳3张以上的卡（请注意，如果由于您替换了3张当前选择的卡，因此它们是匹配项）。
11.我们将不再使用经典形式绘制Set卡（我们将在下周进行绘制），而是使用这三个字符▲●■并使用NSAttributedString中的属性适当地绘制它们（即颜色和阴影）。这样，您的卡就可以只是UIButtons。有关如何显示各种组合卡的一些建议，请参见提示。
12.使用将闭包作为参数的方法，将其作为解决方案的重要组成部分。您不能使用演讲中显示的内容。
13.将枚举用作解决方案的重要组成部分。
14.在某些数据结构中添加有意义的扩展，将其作为有意义的一部分
解决方案。您不能使用演讲中显示的内容。
15.在任何iPhone 7或更高版本的设备上，您的UI都应布局良好且外观良好（至少在纵向模式下，最好在横向模式下，尽管不是必需的）。这意味着您需要对堆栈视图进行一些简单的自动布局。
16.就像您对集中力所做的那样，您必须具有“新建游戏”按钮，并在UI中显示得分。由您自己决定如何得分Set游戏。例如，您可以为比赛提供3分，为不匹配提供-5，取消选择甚至可以给出-1。可能会根据桌面上有多少张牌（即，触摸过3张多发3张牌）获得的得分更少。无论您认为哪种方式，都能最好地评估玩家的比赛状态。

额外信用
1.将“比赛速度”作为用户分数的因素，您可以使用“日期”结构找出时间（几分之一秒），用户找到Sets的速度越快，其分数应该越高。不匹配的惩罚可能需要很高，以阻止过多的猜测。
2.如果可见卡中有一组可用，则按交易3张以上卡进行处罚。您必须编写一种算法来确定一堆Set Card实际上是否至少包括一个Set。
3.如果确实编写了一种算法来检测集合，则还可以添加一个“作弊”按钮，供苦苦挣扎的用户用来查找集合！
4.或者您甚至可以使用“与iPhone对抗”模式。每次找到集合时，启动一个随机长度的计时器（您将必须学习如何使用Timer.scheduledTimer（withTimeInterval：repeats :) {}，使用闭包！）之后，iPhone将选择一个集合用户不会先选择一个。看看谁可以获得最多的套装！也许在计时器运行时在iPhone上的某个地方用表情符号来表示iPhone，然后在iPhone转弯几秒钟后显示😂，如果iPhone获胜则显示not，否则显示））？与往常一样，如果要解决这一问题，请务必仔细考虑您的MVC架构。